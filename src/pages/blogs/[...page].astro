---
import Layout from "../../layouts/Layout.astro";
import Pager from "../../components/organisms/Pager.astro";
import type { GetStaticPathsOptions } from "astro";
import {
  getAllContents,
  getBlogs,
} from "../../libs/microcms";
import type {
  Blog,
  Category,
  Tag,
} from "../../libs/microcms.d.ts";
import { formatDate } from "../../utils/date";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allBlogsResponse = await getBlogs({ limit: 100 });


  return paginate(allBlogsResponse.contents, { pageSize: 10 });
}

const { page } = Astro.props;
const blogs = page.data;

const [allBlogsResponse, allCategoriesResponse, allTagsResponse] =
  await Promise.all([
    getAllContents<Blog>("blogs"),
    getAllContents<Category>("categories"),
    getAllContents<Tag>("tags"),
  ]);

const allBlogs = allBlogsResponse.contents;
const categories = allCategoriesResponse.contents;
const tags = allTagsResponse.contents;

const categoryCounts = categories.map((category) => {
  const count = allBlogs.filter(
    (blog) => blog.category.id === category.id,
  ).length;
  return {
    ...category,
    count,
  };
});

const tagCounts = tags.map((tag) => {
  const count = allBlogs.filter((blog) =>
    blog.tag.some((blogTag) => blogTag.id === tag.id),
  ).length;
  return {
    ...tag,
    count,
  };
});
---

<Layout title={`ブログ一覧 - ${page.currentPage}ページ目`}>
  <main class="inner pt-[160px] sm:pt-[96px] pb-[200px] sm:pb-[64px]">
    <div class="flex justify-between gap-[48px] sm:flex-col">
      <ul class="flex gap-[32px] flex-wrap sm:gap-[28px]">
        {
          blogs.map((blog) => (
            <li class="max-w-[408px] sm:max-w-full w-full">
              <a href={`/blogs/${blog.id}`} class="opacity-hover duration">
                <div>
                  {blog.eyecatch ? (
                    <img
                      src={blog.eyecatch.url}
                      alt={blog.title}
                      class="rounded-lg"
                    />
                  ) : (
                    <img
                      src="/img/dummyImage.png"
                      alt={blog.title}
                      class="rounded-lg"
                    />
                  )}
                </div>
                <div class="p-[12px] sm:px-0 sm:pt-[10px] sm:pb-0">
                  <div class="flex gap-[10px] flex-wrap">
                    <p
                      class="font-bold text-[12px] leading-[1] tracking-[0.06em] px-[20px] pt-[4px] pb-[5px] text-[#FFF] rounded-full sm:text-[10px] sm:pb-[4px]"
                      style={`background-color: ${blog.category.labelColor};`}
                    >
                      {blog.category.name}
                    </p>
                    {blog.readingTime && (
                      <p class="font-bold text-[12px] leading-[1] tracking-[0.06em] px-[20px] pt-[4px] pb-[5px] bg-[#F6F6F6] rounded-full sm:text-[10px] sm:pb-[4px]">
                        <span class="text-[#666}">読了までの時間：</span>
                        {blog.readingTime}分
                      </p>
                    )}
                  </div>
                  <p class="font-black text-[16px] leading-[1.48] tracking-[0.06em] mt-[12px] sm:mt-[10px]">
                    {blog.title}
                  </p>
                  <p class="font-medium text-[12px] leading-[1.48] tracking-[0.06em] mt-[8px] sm:mt-[6px]">
                    {blog.description}
                  </p>
                  <p class="font-medium text-[10px] leading-[1] tracking-[0.06em] mt-[8px] sm:mt-[6px]">
                    {formatDate(blog.publishedAt)}
                  </p>
                  <div class="flex gap-[8px] flex-wrap">
                    {blog.tag.map((tag) => (
                      <p class="font-medium text-[10px] leading-[1] tracking-[0.06em] mt-[8px] sm:mt-[6px]">
                        {tag.name}
                      </p>
                    ))}
                  </div>
                </div>
              </a>
            </li>
          ))
        }
      </ul>
      <div class="shrink-0 max-w-[280px] w-full sm:hidden">
        <p
          class="text-[20px] leading-none tracking-[0.06em] font-bold"
        >
          Category｜カテゴリ
        </p>
        <ul class="mt-[24px]">
          {
            categoryCounts.length === 0 ? (
              <li class="text-sm text-muted-foreground">
                カテゴリがありません
              </li>
            ) : (
              categoryCounts.map((cat) => (
                <li class="text-[12px] font-bold opacity-hover leading-none tracking-[0.06em] duration mt-[12px]">
                  <a href={`/categories/${cat.slug}`}>
                    {cat.name}
                    <span class="bracket">{cat.count}</span>
                  </a>
                </li>
              ))
            )
          }
        </ul>
        <p
          class="text-[20px] leading-none tracking-[0.06em] font-bold mt-[48px]"
        >
          Tag｜タグ
        </p>
        <ul class="mt-[24px] flex gap-[12px] flex-wrap">
          {
            tagCounts.length === 0 ? (
              <li class="text-sm text-muted-foreground">タグがありません</li>
            ) : (
              tagCounts.map((t) => (
                <li class="text-[12px] font-bold opacity-hover leading-none tracking-[0.06em] duration">
                  <a href={`/tags/${t.slug}`}>
                    <span class="hashtag"></span>{t.name}
                    <span class="bracket">{t.count}</span>
                  </a>
                </li>
              ))
            )
          }
        </ul>
      </div>
    </div>
    <Pager page={page} totalCount={allBlogsResponse.totalCount} />
  </main>
</Layout>
