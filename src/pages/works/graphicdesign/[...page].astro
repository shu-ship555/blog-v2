---
import Layout from "../../../layouts/Layout.astro";
import Pager from "../../../components/organisms/pager.astro";
import FilterSection from "../../../components/organisms/filterSection.astro";
import ImageCard from "../../../components/molecules/imageCard.astro";
import { getAllContents } from "../../../libs/microcms";
import type { GetStaticPathsOptions } from "astro";

type Category = {
	id: string;
	slug: string;
	title: string;
	enTitle: string;
};

type Tag = {
	id: string;
	slug: string;
	title: string;
	enTitle: string;
};

type Image = {
	id: string;
	title: string;
	image: { url: string; width: number; height: number };
	sizeHorizontal: number;
	sizeVertical: number;
	isPrivate: boolean;
	category: Category;
	tag: Tag[];
};

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
	const IMAGES_PER_PAGE = 24;
	const res = await getAllContents<Image>("images");
	const images = res.contents;

	const uniqueCategories = [
		...new Set(
			images.map((image) =>
				JSON.stringify({
					slug: image.category.slug,
					title: image.category.title,
					enTitle: image.category.enTitle,
				}),
			),
		),
	].map((str) => JSON.parse(str));

	const allTags = images.flatMap((image) => image.tag);

	const uniqueTags = [
		...new Set(
			allTags.map((tag) =>
				JSON.stringify({
					slug: tag.slug,
					title: tag.title,
					enTitle: tag.enTitle,
				}),
			),
		),
	].map((str) => JSON.parse(str));

	const paginatedPages = paginate(images, {
		pageSize: IMAGES_PER_PAGE,
		params: {},
		props: {
			totalCount: res.totalCount,
			perPage: IMAGES_PER_PAGE,
			uniqueSizes: [...new Set(images.map((image) => `${image.sizeHorizontal}×${image.sizeVertical}`))],
			uniqueCategories: uniqueCategories,
			uniqueTags: uniqueTags,
		},
	});

	paginatedPages.unshift({
		params: { page: undefined },
		props: paginatedPages[0].props,
	});

	return paginatedPages;
}

const { page, totalCount, perPage, uniqueSizes, uniqueCategories, uniqueTags } = Astro.props as {
	page: { data: Image[] };
	totalCount: number;
	perPage: number;
	uniqueSizes: string[];
	uniqueCategories: { slug: string; title: string; enTitle: string }[];
	uniqueTags: { slug: string; title: string; enTitle: string }[];
};

const images = page.data;
---

<Layout
	title="Web制作の実績[画像]｜デザインもできるフロントエンドエンジニアのポートフォリオ"
	breadcrumb={true}
	isImagesPage={true}
	navigation={true}
>
	<main class="inner relative pt-[96px] sm:pt-[48px] pb-[120px] sm:pb-[64px]">
		<h1 class="text-[32px] sm:text-[24px] font-black leading-[1.4] tracking-[0.04em] break-normal">
			Graphic Design<span class="sm:hidden tracking-[0.08em]">｜グラフィックデザイン</span>
			<span class="font-normal bracket">All</span>
		</h1>
		<FilterSection uniqueCategories={uniqueCategories} uniqueSizes={uniqueSizes} uniqueTags={uniqueTags} />
		<ul class="flex flex-wrap gap-[48px] sm:gap-[32px] mt-[48px] sm:mt-[36px]">
			{images.map((image) => <ImageCard image={image} />)}
		</ul>
		<div class="mt-[48px]">
			<Pager page={page} totalCount={totalCount} basePath="/works/graphicdesign" perPage={perPage} />
		</div>
	</main>
</Layout>
