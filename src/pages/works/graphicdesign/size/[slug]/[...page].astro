---
import Layout from "../../../../../layouts/Layout.astro";
import Pager from "../../../../../components/organisms/pager.astro";
import FilterSection from "../../../../../components/organisms/filterSection.astro";
import ImageCard from "../../../../../components/molecules/imageCard.astro";
import { getAllContents } from "../../../../../libs/microcms";
import type { GetStaticPathsOptions } from "astro";

type Category = {
	id: string;
	slug: string;
	title: string;
	enTitle: string;
};

type Tag = {
	id: string;
	slug: string;
	title: string;
	enTitle: string;
};

type Image = {
	id: string;
	title: string;
	images: { url: string; width: number; height: number }[];
	sizeHorizontal: number;
	sizeVertical: number;
	isPrivate: boolean;
	category: Category;
	tag: Tag[];
};

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
	const IMAGES_PER_PAGE = 24;
	const res = await getAllContents<Image>("images");
	const images = res.contents;

	const allUniqueCategories = [...new Set(images.map((image) => JSON.stringify(image.category)))].map((str) =>
		JSON.parse(str),
	);
	const allUniqueTags = [...new Set(images.flatMap((image) => image.tag.map((t) => JSON.stringify(t))))].map((str) =>
		JSON.parse(str),
	);
	const allUniqueSizes = [...new Set(images.map((image) => `${image.sizeHorizontal}×${image.sizeVertical}`))];

	const paginatedPaths = allUniqueSizes.flatMap((size) => {
		const filteredImages = images.filter((image) => `${image.sizeHorizontal}×${image.sizeVertical}` === size);

		const paginatedPages = paginate(filteredImages, {
			pageSize: IMAGES_PER_PAGE,
			params: { slug: size.replace("×", "x") },
			props: {
				sizeTitle: size,
				totalCount: filteredImages.length,
				perPage: IMAGES_PER_PAGE,
				uniqueSizes: allUniqueSizes,
				uniqueCategories: allUniqueCategories,
				uniqueTags: allUniqueTags,
			},
		});

		paginatedPages.unshift({
			params: { slug: size.replace("×", "x"), page: undefined },
			props: paginatedPages[0].props,
		});

		return paginatedPages;
	});

	return paginatedPaths;
}

const { page, totalCount, perPage, uniqueSizes, uniqueCategories, uniqueTags, sizeTitle } = Astro.props as {
	page: { data: Image[] };
	totalCount: number;
	perPage: number;
	uniqueSizes: string[];
	uniqueCategories: { slug: string; title: string; enTitle: string }[];
	uniqueTags: { slug: string; title: string; enTitle: string }[];
	sizeTitle: string;
};

const images = page.data;
---

<Layout
	title={`Web制作の実績[画像]｜デザインもできるフロントエンドエンジニアのポートフォリオ - ${sizeTitle}`}
	breadcrumb={true}
	isImagesPage={true}
	imageSize={sizeTitle}
	navigation={true}
>
	<main class="inner relative pt-[96px] sm:pt-[48px] pb-[120px] sm:pb-[64px]">
		<h1 class="text-[32px] sm:text-[24px] font-black leading-[1.4] tracking-[0.04em] break-normal">
			Graphic Design<span class="sm:hidden tracking-[0.08em]">｜グラフィックデザイン</span>
			<span class="font-normal bracket">{sizeTitle}</span>
		</h1>
		<FilterSection uniqueCategories={uniqueCategories} uniqueSizes={uniqueSizes} uniqueTags={uniqueTags} />
		<ul class="flex flex-wrap gap-[48px] sm:gap-[32px] mt-[48px] sm:mt-[36px]">
			{images.map((image) => <ImageCard image={image} />)}
		</ul>
		<div class="mt-[48px]">
			<Pager
				page={page}
				totalCount={totalCount}
				basePath={`/works/graphicdesign/size/${Astro.params.slug}`}
				perPage={perPage}
			/>
		</div>
	</main>
</Layout>
