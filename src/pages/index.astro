---
import Layout from "../layouts/Layout.astro";
import Header from "../components/organisms/header.astro";
import Pager from "../components/organisms/pager.astro";
import {
	getAllContents,
	getBlogs,
	getCategoryList,
	getTags,
} from "../libs/microcms";
import type {
	Blog,
	Category,
	Tag,
	MicroCMSResponse,
} from "../libs/microcms.d.ts";
import { formatDate } from "../../src/utils/date";

// 1ページあたりの表示件数を定義
const PER_PAGE = 10;
const page = Astro.params.page ? parseInt(Astro.params.page) : 1;
const offset = (page - 1) * PER_PAGE;

// ① 記事一覧表示のために、最初の10件の記事を取得
const recentBlogsResponse: MicroCMSResponse<Blog> = await getBlogs({
	limit: PER_PAGE,
	offset: 0,
});

// ② 件数カウントのために、すべての記事・カテゴリ・タグを取得
const [allBlogsResponse, allCategoriesResponse, allTagsResponse] =
	await Promise.all([
		getAllContents<Blog>("blogs"),
		getAllContents<Category>("categories"),
		getAllContents<Tag>("tags"),
	]);

const blogs = recentBlogsResponse.contents;
const allBlogs = allBlogsResponse.contents; // 全ブログ記事データ
const categories = allCategoriesResponse.contents;
const tags = allTagsResponse.contents;

// 取得した「全ブログ記事データ」を参照して、カテゴリの件数を正確に計算
const categoryCounts = categories.map((category) => {
	const count = allBlogs.filter(
		(blog) => blog.category.id === category.id,
	).length;
	return {
		...category,
		count,
	};
});

// 取得した「全ブログ記事データ」を参照して、タグの件数を正確に計算
const tagCounts = tags.map((tag) => {
	const count = allBlogs.filter((blog) =>
		blog.tag.some((blogTag) => blogTag.id === tag.id),
	).length;
	return {
		...tag,
		count,
	};
});
---

<Layout title="miyata blog">
	<main class="inner pt-[160px] sm:pt-[96px] pb-[200px] sm:pb-[64px]">
		<div class="flex justify-between gap-[56px] sm:flex-col">
			<ul class="flex gap-[32px] flex-wrap sm:gap-[28px]">
				{
					blogs.map((blog) => (
						<li class="max-w-[408px] sm:max-w-full w-full">
							<a href={`/blogs/${blog.id}`} class="opacity-hover duration">
								<div>
									{blog.eyecatch ? (
										<img
											src={blog.eyecatch.url}
											alt={blog.title}
											class="rounded-lg"
										/>
									) : (
										<img
											src="/public/img/dummyImage.png"
											alt={blog.title}
											class="rounded-lg"
										/>
									)}
								</div>
								<div class="p-[12px] sm:px-0 sm:pt-[10px] sm:pb-0">
									<div class="flex gap-[10px] flex-wrap">
										<p
											class="font-bold text-[12px] leading-[1] tracking-[0.06em] px-[20px] pt-[4px] pb-[5px] text-[#FFF] rounded-full sm:text-[10px] sm:pb-[4px]"
											style={`background-color: ${blog.category.labelColor};`}
										>
											{blog.category.name}
										</p>
										{blog.readingTime && (
											<p class="font-bold text-[12px] leading-[1] tracking-[0.06em] px-[20px] pt-[4px] pb-[5px] bg-[#F6F6F6] rounded-full sm:text-[10px] sm:pb-[4px]">
												<span class="text-[#666]">読了までの時間：</span>
												{blog.readingTime}分
											</p>
										)}
									</div>
									<p class="font-bold text-[16px] leading-[1.48] tracking-[0.06em] mt-[12px] sm:mt-[10px]">
										{blog.title}
									</p>
									<p class="font-medium text-[12px] leading-[1.48] tracking-[0.06em] mt-[8px] sm:mt-[6px]">
										{blog.description}
									</p>
									<p class="font-medium text-[10px] leading-[1] tracking-[0.06em] mt-[8px] sm:mt-[6px]">
										{formatDate(blog.publishedAt)}
									</p>
									<div class="flex gap-[8px] flex-wrap">
										{blog.tag.map((tag) => (
											<p class="font-medium text-[10px] leading-[1] tracking-[0.06em] mt-[8px] sm:mt-[6px]">
												#{tag.name}
											</p>
										))}
									</div>
								</div>
							</a>
						</li>
					))
				}
			</ul>
			<div class="shrink-0 max-w-[280px] w-full sm:hidden">
				<!-- <p class="text-[20px] leading-none tracking-[0.06em] font-bold">
					Filter｜フィルター
				</p>
				<ul class="mt-[24px]">
					<li
						class="text-[12px] font-bold opacity-hover leading-none tracking-[0.06em] duration mt-[12px] cursor-pointer"
					>
						新着順
					</li>
					<li
						class="text-[12px] font-bold opacity-hover leading-none tracking-[0.06em] duration mt-[12px] cursor-pointer"
					>
						2025年
					</li>
				</ul> -->
				<p class="text-[20px] leading-none tracking-[0.06em] font-bold">
					Category｜カテゴリ
				</p>
				<ul class="mt-[24px]">
					{
						categoryCounts.length === 0 ? (
							<li class="text-sm text-muted-foreground">
								カテゴリがありません
							</li>
						) : (
							categoryCounts.map((category) => (
								<li class="text-[12px] font-bold opacity-hover leading-none tracking-[0.06em] duration mt-[12px]">
									<a href={`/categories/${category.slug}`}>
										{category.name}
										<span class="bracket">{category.count}</span>
									</a>
								</li>
							))
						)
					}
				</ul>
				<p
					class="text-[20px] leading-none tracking-[0.06em] font-bold mt-[48px]"
				>
					Tag｜タグ
				</p>
				<ul class="mt-[24px] flex gap-[12px] flex-wrap">
					{
						tagCounts.length === 0 ? (
							<li class="text-sm text-muted-foreground">タグがありません</li>
						) : (
							tagCounts.map((tag) => (
								<li class="text-[12px] font-bold opacity-hover leading-none tracking-[0.06em] duration">
									<a href={`/tags/${tag.slug}`}>
										#{tag.name}
										<span class="bracket">{tag.count}</span>
									</a>
								</li>
							))
						)
					}
				</ul>
			</div>
		</div>
		<Pager />
	</main>
</Layout>
