---
import Icon from "../atoms/icon.astro";
import { getAllContents } from "../../libs/microcms";
import type { Blog, Category, Tag } from "../../libs/microcms.d.ts";

interface NavItem {
	href?: string;
	text?: string;
	name?: string;
	target?: boolean;
}

const [allBlogsResponse, allCategoriesResponse, allTagsResponse] =
	await Promise.all([
		getAllContents<Blog>("blogs"),
		getAllContents<Category>("categories"),
		getAllContents<Tag>("tags"),
	]);

const allBlogs = allBlogsResponse.contents;
const categories = allCategoriesResponse.contents;
const tags = allTagsResponse.contents;

const categoryCounts = categories.map((category) => {
	const count = allBlogs.filter(
		(blog) => blog.category.id === category.id,
	).length;
	return {
		...category,
		count,
	};
});

const tagCounts = tags.map((tag) => {
	const count = allBlogs.filter((blog) =>
		blog.tag.some((blogTag) => blogTag.id === tag.id),
	).length;
	return {
		...tag,
		count,
	};
});

interface Props {
	navItems?: NavItem[];
}

const { navItems = [] } = Astro.props;
---

<header
	class="fixed z-50 w-full h-auto bg-[#FFF]/[0.64] sm:bg-[#000]/[0] backdrop-blur-lg js-header"
>
	<div class="pt-[44px] sm:pt-[20px] pb-[48px] sm:pb-[24px] inner">
		<div class="flex justify-between">
			<a href="/" class="opacity-hover duration"
				><Icon
					filename="logo"
					color="#0079C9"
					customClass="w-[88px] sm:w-[72px]"
				/></a
			>
			<nav class="text-[16px] font-bold flex justify-center items-center">
				<ol class="flex items-center gap-[40px]">
					{
						navItems.map((item) => (
							<li class="leading-none tracking-[0.06em] sm:hidden">
								<a
									href={item.href}
									target={item.target ? "_blank" : ""}
									class="opacity-hover duration"
								>
									{item.text}
									{item.target ? (
										<Icon
											filename="icon_open_in_new"
											color="#333"
											customClass="w-[20px] sm:w-[16px] align-[sub]"
										/>
									) : (
										""
									)}
								</a>
							</li>
						))
					}
					<li class="sm:hidden">
						<a
							href="https://x.com/miyata_x5"
							target="_blank"
							class="opacity-hover duration"
						>
							<Icon
								filename="logo_x"
								color="#333"
								customClass="w-[20px] sm:w-[16px] align-[sub]"
							/>
						</a>
					</li>
					<li class="hidden leading-none sm:block js-open">
						<Icon filename="icon_menu" customClass="w-[32px]" />
					</li>
					<li class="hidden leading-none js-close">
						<Icon filename="icon_x" customClass="w-[32px]" />
					</li>
				</ol>
			</nav>
		</div>
	</div>
</header>
<nav
	class="text-[16px] z-30 font-bold w-full js-menu mx-auto pt-[24vh] inner absolute left-1/2 -translate-x-1/2 hidden"
>
	<ol class="flex flex-col gap-[40px] sm:gap-[28px] mx-auto">
		{
			navItems.map((item) => (
				<li class="leading-none tracking-[0.06em] font-black">
					<a
						href={item.href}
						target={item.target ? "_blank" : ""}
						class="opacity-hover duration"
					>
						{item.text}｜{item.name}
						{item.target ? (
							<Icon
								filename="icon_open_in_new"
								color="#333"
								customClass="w-[20px] sm:w-[18px] align-[-3px]"
							/>
						) : (
							""
						)}
					</a>
				</li>
			))
		}
		<li><span>SNS｜</span>
			<a
				href="https://x.com/miyata_x5"
				target="_blank"
				class="opacity-hover duration"
			>
				<Icon
					filename="logo_x"
					color="#333"
					customClass="w-[20px] sm:w-[16px] align-[text-top]"
				/>
			</a>
		</li>
		<li><hr class="border border-[#333]" /></li>
		<li class="shrink-0">
			<p class="text-[16px] leading-none tracking-[0.06em] font-black">
				Category｜カテゴリ
			</p>
			<ul class="mt-[18px] sm:mt-[12px]">
				{
					categoryCounts.length === 0 ? (
						<li class="text-sm text-muted-foreground">カテゴリがありません</li>
					) : (
						categoryCounts.map((category) => (
							<li class="text-[12px] font-bold opacity-hover leading-none tracking-[0.06em] duration mt-[12px]">
								<a href={`/categories/${category.slug}`}>
									{category.name}
									<span class="bracket">{category.count}</span>
								</a>
							</li>
						))
					)
				}
			</ul>
			<p
				class="text-[16px] leading-none tracking-[0.06em] font-black mt-[32px] sm:mt-[28px]"
			>
				Tag｜タグ
			</p>
			<ul class="mt-[18px] sm:mt-[12px] flex gap-[12px] flex-wrap">
				{
					tagCounts.length === 0 ? (
						<li class="text-sm text-muted-foreground">タグがありません</li>
					) : (
						tagCounts.map((tag) => (
							<li class="text-[12px] font-bold opacity-hover leading-none tracking-[0.06em] d">
								<a href={`/tags/${tag.slug}`}>
									<span class="hashtag" />
									{tag.name}
									<span class="bracket">{tag.count}</span>
								</a>
							</li>
						))
					)
				}
			</ul>
		</li>
	</ol>
</nav>
