---
import Icon from "../atoms/icon.astro";

const { page, totalCount, slug = null } = Astro.props;
const PER_PAGE = 10;
const lastPage = Math.ceil(totalCount / PER_PAGE);
const isCategoryPage = slug !== null;
const pathPrefix = isCategoryPage ? `/categories/${slug}` : "/blogs";

// 最大表示ページ数
const MAX_VISIBLE_PAGES = 4;

// 表示開始ページ番号を計算
let startPage = Math.max(1, page.currentPage - Math.floor(MAX_VISIBLE_PAGES / 2));
// 表示終了ページ番号を計算
let endPage = Math.min(lastPage, startPage + MAX_VISIBLE_PAGES - 1);

// 終了ページが最大ページ数に満たない場合、開始ページを調整
if (endPage - startPage + 1 < MAX_VISIBLE_PAGES) {
  startPage = Math.max(1, endPage - MAX_VISIBLE_PAGES + 1);
}
---

{totalCount > PER_PAGE && (
  <div class="flex justify-center mt-[120px] sm:mt-[80px]">
    <nav class="flex items-center gap-[12px]">
      {/* 前のページへのリンク */}
      {page.currentPage > 1 ? (
        <a
          href={page.currentPage - 1 === 1 ? pathPrefix : `${pathPrefix}/${page.currentPage - 1}`}
          class="flex items-center w-[40px] h-[40px] aspect-square rounded-full bg-white opacity-hover duration"
        >
          <Icon
            filename="icon_arrow_left"
            color="#333"
            customClass="w-[24px]"
          />
        </a>
      ) : (
        <span
          class="flex items-center w-[40px] h-[40px] aspect-square rounded-full bg-white opacity-40 cursor-not-allowed"
        >
          <Icon
            filename="icon_arrow_left"
            color="#333"
            customClass="w-[24px]"
          />
        </span>
      )}

      {/* ...の表示（開始ページが1より大きい場合） */}
      {startPage > 1 && <span>...</span>}

      {
        Array.from({ length: endPage - startPage + 1 }, (_, i) => (
          <a
            href={startPage + i === 1 ? pathPrefix : `${pathPrefix}/${startPage + i}`}
            class={`w-[40px] h-[40px] aspect-square rounded-full flex items-center justify-center opacity-hover duration ${startPage + i === page.currentPage ? "bg-[#0079C9] text-white" : "bg-white"}`}
          >
            <span>{startPage + i}</span>
          </a>
        ))
      }

      {/* ...の表示（終了ページがlastPageより小さい場合） */}
      {endPage < lastPage && <span>...</span>}

      {/* 次のページへのリンク */}
      {page.currentPage < lastPage ? (
        <a
          href={`${pathPrefix}/${page.currentPage + 1}`}
          class="flex items-center justify-center w-[40px] h-[40px] aspect-square rounded-full bg-white opacity-hover duration"
        >
          <Icon
            filename="icon_arrow_right"
            color="#333"
            customClass="w-[24px]"
          />
        </a>
      ) : (
        <span
          class="flex items-center justify-center w-[40px] h-[40px] aspect-square rounded-full bg-white opacity-40 cursor-not-allowed"
        >
          <Icon
            filename="icon_arrow_right"
            color="#333"
            customClass="w-[24px]"
          />
        </span>
      )}
    </nav>
  </div>
)}
